// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package nft

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// NftMetaData contains all meta data concerning the Nft contract.
var NftMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFIcontract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"afterBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"beforeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"collection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"createCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"createNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collection\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"saleNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"}],\"name\":\"trasnferCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f80fd5b50604051614a07380380614a0783398181016040528101906100319190610fe3565b8060055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503360065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061014a6040518060400160405280601c81526020017fd093d0b5d180d0b4d0b020d0b220d0bfd180d0bed184d0b8d0bbd18c0000000081525060405180606001604052806038815260200161494c603891396040518060400160405280600e81526020017f6875736b795f6e6674312e706e670000000000000000000000000000000000008152506107d060075f6106f660201b60201c565b506101e46040518060400160405280602081526020017fd093d0b5d180d0b4d0b020d0bdd0b020d184d180d0b8d0bbd0b0d0bdd181d0b58152506040518060600160405280603581526020016149d2603591396040518060400160405280600e81526020017f6875736b795f6e6674322e706e6700000000000000000000000000000000000081525061138860055f6106f660201b60201c565b5061027e6040518060400160405280601f81526020017fd09dd0bed0b2d0bed0b3d0bed0b4d0bdd18fd18f20d093d0b5d180d0b4d0b0008152506040518060600160405280602b81526020016148f1602b91396040518060400160405280600e81526020017f6875736b795f6e6674332e706e67000000000000000000000000000000000000815250610dac60025f6106f660201b60201c565b506103186040518060400160405280601c81526020017fd093d0b5d180d0b4d0b020d0b220d0bed182d0bfd183d181d0bad0b5000000008152506040518060800160405280604e8152602001614984604e91396040518060400160405280600e81526020017f6875736b795f6e6674342e706e67000000000000000000000000000000000000815250610fa060065f6106f660201b60201c565b505f61035a6040518060600160405280602381526020016148ce6023913960405180606001604052806037815260200161481c6037913961097360201b60201c565b90506103f36040518060400160405280600e81526020017fd09ad0bed0bcd0bed187d0b5d0ba0000000000000000000000000000000000008152506040518060600160405280602f8152602001614853602f91396040518060400160405280600c81526020017f6361745f6e6674312e706e6700000000000000000000000000000000000000008152505f6001866106f660201b60201c565b5061048b6040518060400160405280601281526020017fd092d0bad183d181d0bdd18fd188d0bad0b000000000000000000000000000008152506040518060800160405280604c8152602001614882604c91396040518060400160405280600c81526020017f6361745f6e6674322e706e6700000000000000000000000000000000000000008152505f6001866106f660201b60201c565b506105236040518060400160405280600e81526020017fd09fd183d0b7d18bd180d0b8d0ba0000000000000000000000000000000000008152506040518060600160405280603881526020016147e4603891396040518060400160405280600c81526020017f6361745f6e6674332e706e6700000000000000000000000000000000000000008152505f6001866106f660201b60201c565b505f61059f6040518060400160405280601081526020017fd09fd0b5d188d0b5d185d0bed0b4d18b000000000000000000000000000000008152506040518060400160405280601981526020017fd09ad183d0b4d0b020d0bed0bdd0b820d0b8d0b4d183d1823f0000000000000081525061097360201b60201c565b90506106386040518060400160405280601881526020017fd091d0b0d181d0bad0b5d182d0b1d0bed0bbd0b8d181d182000000000000000081525060405180606001604052806030815260200161491c603091396040518060400160405280600f81526020017f77616c6b65725f6e6674312e706e6700000000000000000000000000000000008152505f6001866106f660201b60201c565b506106ed6040518060400160405280601281526020017fd092d0bed0bbd188d0b5d0b1d0bdd0b8d0ba00000000000000000000000000008152506040518060400160405280602081526020017fd09ed0bd20d0b8d0b4d0b5d18220d0bad0bed0bbd0b4d0bed0b2d0b0d182d18c8152506040518060400160405280600f81526020017f77616c6b65725f6e6674322e706e6700000000000000000000000000000000008152505f6001866106f660201b60201c565b50505050611554565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156107a1575060065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156107e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d890611068565b60405180910390fd5b5f60016003805490506107f491906110bc565b90505f805f8381526020019081526020015f20905081815f0181905550888160010190816108229190611320565b50878160020190816108349190611320565b50868160030190816108469190611320565b5042816007018190555083816008018190555084816005018190555085816004015f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550600382908060018154018082558091505060019003905f5260205f20015f90919091909150555f8414610932575f60015f8681526020019081526020015f2090508060030183908060018154018082558091505060019003905f5260205f20015f9091909190915055505b61096460055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff168387610b0060201b60201c565b81925050509695505050505050565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610a1e575060065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610a5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5590611068565b60405180910390fd5b5f6001600480549050610a7191906110bc565b905060605f60015f8481526020019081526020015f20905082815f018190555085816001019081610aa29190611320565b5084816002019081610ab49190611320565b5081816003019080519060200190610acd929190610f1f565b50600483908060018154018082558091505060019003905f5260205f20015f909190919091505582935050505092915050565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610baa575060065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610bea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be190611068565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4f90611439565b60405180910390fd5b5f80610c6a8484610c8760201b60201c565b91509150610c805f868484610cb760201b60201c565b5050505050565b60608060405191506001825283602083015260408201905060018152826020820152604081016040529250929050565b610cc984848484610ccf60201b60201c565b50505050565b8051825114610d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0a906114a1565b60405180910390fd5b5f5b8251811015610f18575f838281518110610d3257610d316114bf565b5b602002602001015190505f838381518110610d5057610d4f6114bf565b5b602002602001015190505f73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614610e75575f60025f8481526020019081526020015f205f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610e20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1790611536565b60405180910390fd5b81810360025f8581526020019081526020015f205f8a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610f0b578060025f8481526020019081526020015f205f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610f0391906110bc565b925050819055505b5050806001019050610d15565b5050505050565b828054828255905f5260205f20908101928215610f59579160200282015b82811115610f58578251825591602001919060010190610f3d565b5b509050610f669190610f6a565b5090565b5b80821115610f81575f815f905550600101610f6b565b5090565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610fb282610f89565b9050919050565b610fc281610fa8565b8114610fcc575f80fd5b50565b5f81519050610fdd81610fb9565b92915050565b5f60208284031215610ff857610ff7610f85565b5b5f61100584828501610fcf565b91505092915050565b5f82825260208201905092915050565b7f6e6f74206f776e657200000000000000000000000000000000000000000000005f82015250565b5f61105260098361100e565b915061105d8261101e565b602082019050919050565b5f6020820190508181035f83015261107f81611046565b9050919050565b5f819050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6110c682611086565b91506110d183611086565b92508282019050808211156110e9576110e861108f565b5b92915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061116a57607f821691505b60208210810361117d5761117c611126565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026111df7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826111a4565b6111e986836111a4565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61122461121f61121a84611086565b611201565b611086565b9050919050565b5f819050919050565b61123d8361120a565b6112516112498261122b565b8484546111b0565b825550505050565b5f90565b611265611259565b611270818484611234565b505050565b5b81811015611293576112885f8261125d565b600181019050611276565b5050565b601f8211156112d8576112a981611183565b6112b284611195565b810160208510156112c1578190505b6112d56112cd85611195565b830182611275565b50505b505050565b5f82821c905092915050565b5f6112f85f19846008026112dd565b1980831691505092915050565b5f61131083836112e9565b9150826002028217905092915050565b611329826110ef565b67ffffffffffffffff811115611342576113416110f9565b5b61134c8254611153565b611357828285611297565b5f60209050601f831160018114611388575f8415611376578287015190505b6113808582611305565b8655506113e7565b601f19841661139686611183565b5f5b828110156113bd57848901518255600182019150602085019450602081019050611398565b868310156113da57848901516113d6601f8916826112e9565b8355505b6001600288020188555050505b505050505050565b7f6d696e74206572726f72000000000000000000000000000000000000000000005f82015250565b5f611423600a8361100e565b915061142e826113ef565b602082019050919050565b5f6020820190508181035f83015261145081611417565b9050919050565b7f757064617465206572726f7200000000000000000000000000000000000000005f82015250565b5f61148b600c8361100e565b915061149682611457565b602082019050919050565b5f6020820190508181035f8301526114b88161147f565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f7570646174652062616c616e6365206572726f720000000000000000000000005f82015250565b5f61152060148361100e565b915061152b826114ec565b602082019050919050565b5f6020820190508181035f83015261154d81611514565b9050919050565b613283806115615f395ff3fe608060405234801561000f575f80fd5b5060043610610113575f3560e01c80638da5cb5b116100a0578063aaadbbae1161006f578063aaadbbae1461032d578063b52d468114610349578063f077237714610365578063fba0ee6414610397578063fdbda0ec146103b357610113565b80638da5cb5b146102795780639d0214cb14610297578063a0a04d0f146102cd578063a3c0b95b146102fd57610113565b80631f320331116100e75780631f320331146101af5780632d7561cf146101df5780634e1273f41461020f578063734eda691461023f5780638a4653221461025b57610113565b8062fdd58e146101175780630febdd4914610147578063156e29f614610163578063176b9b751461017f575b5f80fd5b610131600480360381019061012c9190611dcb565b6103e3565b60405161013e9190611e18565b60405180910390f35b610161600480360381019061015c9190611e31565b610439565b005b61017d60048036038101906101789190611e95565b6104be565b005b61019960048036038101906101949190612021565b610639565b6040516101a69190611e18565b60405180910390f35b6101c960048036038101906101c49190612097565b6107c6565b6040516101d69190611e18565b60405180910390f35b6101f960048036038101906101f491906120d5565b6107e6565b6040516102069190611e18565b60405180910390f35b61022960048036038101906102249190612336565b610a5d565b6040516102369190612463565b60405180910390f35b61025960048036038101906102549190612483565b610b6e565b005b610263610d56565b60405161027091906124f6565b60405180910390f35b610281610d7b565b60405161028e91906124f6565b60405180910390f35b6102b160048036038101906102ac919061250f565b610da0565b6040516102c4979695949392919061259a565b60405180910390f35b6102e760048036038101906102e2919061261c565b610f6f565b6040516102f49190611e18565b60405180910390f35b6103176004803603810190610312919061250f565b61138f565b6040516103249190611e18565b60405180910390f35b61034760048036038101906103429190612097565b6113af565b005b610363600480360381019061035e9190612693565b61151d565b005b61037f600480360381019061037a919061250f565b611670565b60405161038e939291906126e3565b60405180910390f35b6103b160048036038101906103ac9190612726565b6117a2565b005b6103cd60048036038101906103c8919061250f565b611827565b6040516103da9190611e18565b60405180910390f35b5f60025f8381526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f3390508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146104ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a29061280c565b60405180910390fd5b6104b785858585611847565b5050505050565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610568575060065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156105a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059f90612874565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060d906128dc565b60405180910390fd5b5f806106228484611947565b915091506106325f868484611977565b5050505050565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156106e4575060065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610724576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071b90612874565b60405180910390fd5b5f60016004805490506107379190612927565b905060605f60015f8481526020019081526020015f20905082815f0181905550858160010190816107689190612b54565b508481600201908161077a9190612b54565b5081816003019080519060200190610793929190611cc7565b50600483908060018154018082558091505060019003905f5260205f20015f909190919091505582935050505092915050565b6002602052815f5260405f20602052805f5260405f205f91509150505481565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610891575060065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156108d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c890612874565b60405180910390fd5b5f60016003805490506108e49190612927565b90505f805f8381526020019081526020015f20905081815f0181905550888160010190816109129190612b54565b50878160020190816109249190612b54565b50868160030190816109369190612b54565b5042816007018190555083816008018190555084816005018190555085816004015f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550600382908060018154018082558091505060019003905f5260205f20015f90919091909150555f8414610a22575f60015f8681526020019081526020015f2090508060030183908060018154018082558091505060019003905f5260205f20015f9091909190915055505b610a4e60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683876104be565b81925050509695505050505050565b60608151835114610aa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9a90612c6d565b60405180910390fd5b5f835167ffffffffffffffff811115610abf57610abe611efd565b5b604051908082528060200260200182016040528015610aed5781602001602082028036833780820191505090505b5090505f5b8451811015610b6357610b39858281518110610b1157610b10612c8b565b5b6020026020010151858381518110610b2c57610b2b612c8b565b5b60200260200101516103e3565b828281518110610b4c57610b4b612c8b565b5b602002602001018181525050806001019050610af2565b508091505092915050565b5f805f8581526020019081526020015f20600801541480610bdc575060055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b610c1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1290612d02565b60405180910390fd5b8060025f8581526020019081526020015f205f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20541015610caa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca190612d6a565b60405180910390fd5b815f808581526020019081526020015f206004015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550805f808581526020019081526020015f206006015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555050505050565b60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f602052805f5260405f205f91509050805f015490806001018054610dc490612987565b80601f0160208091040260200160405190810160405280929190818152602001828054610df090612987565b8015610e3b5780601f10610e1257610100808354040283529160200191610e3b565b820191905f5260205f20905b815481529060010190602001808311610e1e57829003601f168201915b505050505090806002018054610e5090612987565b80601f0160208091040260200160405190810160405280929190818152602001828054610e7c90612987565b8015610ec75780601f10610e9e57610100808354040283529160200191610ec7565b820191905f5260205f20905b815481529060010190602001808311610eaa57829003601f168201915b505050505090806003018054610edc90612987565b80601f0160208091040260200160405190810160405280929190818152602001828054610f0890612987565b8015610f535780601f10610f2a57610100808354040283529160200191610f53565b820191905f5260205f20905b815481529060010190602001808311610f3657829003601f168201915b5050505050908060050154908060070154908060080154905087565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561101a575060065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561105a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105190612874565b60405180910390fd5b5f805f8881526020019081526020015f206008015414806110c8575060055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b611107576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fe90612d02565b60405180910390fd5b845f808881526020019081526020015f206006015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20541015611198576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118f90612df8565b60405180910390fd5b606482865f808a81526020019081526020015f206004015f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546111f59190612e16565b6111ff9190612e16565b6112099190612e84565b855f808981526020019081526020015f206004015f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546112639190612e16565b61126d9190612eb4565b8310156112af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a690612f31565b60405180910390fd5b606482865f808a81526020019081526020015f206004015f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461130c9190612e16565b6113169190612e16565b6113209190612e84565b855f808981526020019081526020015f206004015f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205461137a9190612e16565b6113849190612eb4565b905095945050505050565b6003818154811061139e575f80fd5b905f5260205f20015f915090505481565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015611459575060065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15611499576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149090612874565b60405180910390fd5b5f60015f8481526020019081526020015f2090505f5b81600301805490508110156115175761150a60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848460030184815481106114fa576114f9612c8b565b5b905f5260205f2001546001610439565b80806001019150506114af565b50505050565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156115c7575060065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15611607576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115fe90612874565b60405180910390fd5b815f808581526020019081526020015f206006015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546116649190612eb4565b92505081905550505050565b6001602052805f5260405f205f91509050805f01549080600101805461169590612987565b80601f01602080910402602001604051908101604052809291908181526020018280546116c190612987565b801561170c5780601f106116e35761010080835404028352916020019161170c565b820191905f5260205f20905b8154815290600101906020018083116116ef57829003601f168201915b50505050509080600201805461172190612987565b80601f016020809104026020016040519081016040528092919081815260200182805461174d90612987565b80156117985780601f1061176f57610100808354040283529160200191611798565b820191905f5260205f20905b81548152906001019060200180831161177b57829003601f168201915b5050505050905083565b5f3390508073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611814576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180b90612f99565b60405180910390fd5b61182085858585611989565b5050505050565b60048181548110611836575f80fd5b905f5260205f20015f915090505481565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036118b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ac90613001565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611923576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191a90613069565b60405180910390fd5b5f8061192f8484611947565b9150915061193f86868484611977565b505050505050565b60608060405191506001825283602083015260408201905060018152826020820152604081016040529250929050565b61198384848484611a77565b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036119f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ee906130d1565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611a65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5c9061315f565b60405180910390fd5b611a7184848484611977565b50505050565b8051825114611abb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab2906131c7565b60405180910390fd5b5f5b8251811015611cc0575f838281518110611ada57611ad9612c8b565b5b602002602001015190505f838381518110611af857611af7612c8b565b5b602002602001015190505f73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614611c1d575f60025f8481526020019081526020015f205f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015611bc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bbf9061322f565b60405180910390fd5b81810360025f8581526020019081526020015f205f8a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614611cb3578060025f8481526020019081526020015f205f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254611cab9190612927565b925050819055505b5050806001019050611abd565b5050505050565b828054828255905f5260205f20908101928215611d01579160200282015b82811115611d00578251825591602001919060010190611ce5565b5b509050611d0e9190611d12565b5090565b5b80821115611d29575f815f905550600101611d13565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611d6782611d3e565b9050919050565b611d7781611d5d565b8114611d81575f80fd5b50565b5f81359050611d9281611d6e565b92915050565b5f819050919050565b611daa81611d98565b8114611db4575f80fd5b50565b5f81359050611dc581611da1565b92915050565b5f8060408385031215611de157611de0611d36565b5b5f611dee85828601611d84565b9250506020611dff85828601611db7565b9150509250929050565b611e1281611d98565b82525050565b5f602082019050611e2b5f830184611e09565b92915050565b5f805f8060808587031215611e4957611e48611d36565b5b5f611e5687828801611d84565b9450506020611e6787828801611d84565b9350506040611e7887828801611db7565b9250506060611e8987828801611db7565b91505092959194509250565b5f805f60608486031215611eac57611eab611d36565b5b5f611eb986828701611d84565b9350506020611eca86828701611db7565b9250506040611edb86828701611db7565b9150509250925092565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611f3382611eed565b810181811067ffffffffffffffff82111715611f5257611f51611efd565b5b80604052505050565b5f611f64611d2d565b9050611f708282611f2a565b919050565b5f67ffffffffffffffff821115611f8f57611f8e611efd565b5b611f9882611eed565b9050602081019050919050565b828183375f83830152505050565b5f611fc5611fc084611f75565b611f5b565b905082815260208101848484011115611fe157611fe0611ee9565b5b611fec848285611fa5565b509392505050565b5f82601f83011261200857612007611ee5565b5b8135612018848260208601611fb3565b91505092915050565b5f806040838503121561203757612036611d36565b5b5f83013567ffffffffffffffff81111561205457612053611d3a565b5b61206085828601611ff4565b925050602083013567ffffffffffffffff81111561208157612080611d3a565b5b61208d85828601611ff4565b9150509250929050565b5f80604083850312156120ad576120ac611d36565b5b5f6120ba85828601611db7565b92505060206120cb85828601611d84565b9150509250929050565b5f805f805f8060c087890312156120ef576120ee611d36565b5b5f87013567ffffffffffffffff81111561210c5761210b611d3a565b5b61211889828a01611ff4565b965050602087013567ffffffffffffffff81111561213957612138611d3a565b5b61214589828a01611ff4565b955050604087013567ffffffffffffffff81111561216657612165611d3a565b5b61217289828a01611ff4565b945050606061218389828a01611db7565b935050608061219489828a01611db7565b92505060a06121a589828a01611db7565b9150509295509295509295565b5f67ffffffffffffffff8211156121cc576121cb611efd565b5b602082029050602081019050919050565b5f80fd5b5f6121f36121ee846121b2565b611f5b565b90508083825260208201905060208402830185811115612216576122156121dd565b5b835b8181101561223f578061222b8882611d84565b845260208401935050602081019050612218565b5050509392505050565b5f82601f83011261225d5761225c611ee5565b5b813561226d8482602086016121e1565b91505092915050565b5f67ffffffffffffffff8211156122905761228f611efd565b5b602082029050602081019050919050565b5f6122b36122ae84612276565b611f5b565b905080838252602082019050602084028301858111156122d6576122d56121dd565b5b835b818110156122ff57806122eb8882611db7565b8452602084019350506020810190506122d8565b5050509392505050565b5f82601f83011261231d5761231c611ee5565b5b813561232d8482602086016122a1565b91505092915050565b5f806040838503121561234c5761234b611d36565b5b5f83013567ffffffffffffffff81111561236957612368611d3a565b5b61237585828601612249565b925050602083013567ffffffffffffffff81111561239657612395611d3a565b5b6123a285828601612309565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6123de81611d98565b82525050565b5f6123ef83836123d5565b60208301905092915050565b5f602082019050919050565b5f612411826123ac565b61241b81856123b6565b9350612426836123c6565b805f5b8381101561245657815161243d88826123e4565b9750612448836123fb565b925050600181019050612429565b5085935050505092915050565b5f6020820190508181035f83015261247b8184612407565b905092915050565b5f805f806080858703121561249b5761249a611d36565b5b5f6124a887828801611d84565b94505060206124b987828801611db7565b93505060406124ca87828801611db7565b92505060606124db87828801611db7565b91505092959194509250565b6124f081611d5d565b82525050565b5f6020820190506125095f8301846124e7565b92915050565b5f6020828403121561252457612523611d36565b5b5f61253184828501611db7565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f61256c8261253a565b6125768185612544565b9350612586818560208601612554565b61258f81611eed565b840191505092915050565b5f60e0820190506125ad5f83018a611e09565b81810360208301526125bf8189612562565b905081810360408301526125d38188612562565b905081810360608301526125e78187612562565b90506125f66080830186611e09565b61260360a0830185611e09565b61261060c0830184611e09565b98975050505050505050565b5f805f805f60a0868803121561263557612634611d36565b5b5f61264288828901611db7565b955050602061265388828901611db7565b945050604061266488828901611d84565b935050606061267588828901611db7565b925050608061268688828901611db7565b9150509295509295909350565b5f805f606084860312156126aa576126a9611d36565b5b5f6126b786828701611db7565b93505060206126c886828701611db7565b92505060406126d986828701611d84565b9150509250925092565b5f6060820190506126f65f830186611e09565b81810360208301526127088185612562565b9050818103604083015261271c8184612562565b9050949350505050565b5f805f806080858703121561273e5761273d611d36565b5b5f61274b87828801611d84565b945050602061275c87828801611d84565b935050604085013567ffffffffffffffff81111561277d5761277c611d3a565b5b61278987828801612309565b925050606085013567ffffffffffffffff8111156127aa576127a9611d3a565b5b6127b687828801612309565b91505092959194509250565b7f736166655472616e7366657246726f6d206572726f72000000000000000000005f82015250565b5f6127f6601683612544565b9150612801826127c2565b602082019050919050565b5f6020820190508181035f830152612823816127ea565b9050919050565b7f6e6f74206f776e657200000000000000000000000000000000000000000000005f82015250565b5f61285e600983612544565b91506128698261282a565b602082019050919050565b5f6020820190508181035f83015261288b81612852565b9050919050565b7f6d696e74206572726f72000000000000000000000000000000000000000000005f82015250565b5f6128c6600a83612544565b91506128d182612892565b602082019050919050565b5f6020820190508181035f8301526128f3816128ba565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61293182611d98565b915061293c83611d98565b9250828201905080821115612954576129536128fa565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061299e57607f821691505b6020821081036129b1576129b061295a565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302612a137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826129d8565b612a1d86836129d8565b95508019841693508086168417925050509392505050565b5f819050919050565b5f612a58612a53612a4e84611d98565b612a35565b611d98565b9050919050565b5f819050919050565b612a7183612a3e565b612a85612a7d82612a5f565b8484546129e4565b825550505050565b5f90565b612a99612a8d565b612aa4818484612a68565b505050565b5b81811015612ac757612abc5f82612a91565b600181019050612aaa565b5050565b601f821115612b0c57612add816129b7565b612ae6846129c9565b81016020851015612af5578190505b612b09612b01856129c9565b830182612aa9565b50505b505050565b5f82821c905092915050565b5f612b2c5f1984600802612b11565b1980831691505092915050565b5f612b448383612b1d565b9150826002028217905092915050565b612b5d8261253a565b67ffffffffffffffff811115612b7657612b75611efd565b5b612b808254612987565b612b8b828285612acb565b5f60209050601f831160018114612bbc575f8415612baa578287015190505b612bb48582612b39565b865550612c1b565b601f198416612bca866129b7565b5f5b82811015612bf157848901518255600182019150602085019450602081019050612bcc565b86831015612c0e5784890151612c0a601f891682612b1d565b8355505b6001600288020188555050505b505050505050565b7f62616c616e63654f664261746368206572726f720000000000000000000000005f82015250565b5f612c57601483612544565b9150612c6282612c23565b602082019050919050565b5f6020820190508181035f830152612c8481612c4b565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e6f7420666f722073696d706c652073616c65000000000000000000000000005f82015250565b5f612cec601383612544565b9150612cf782612cb8565b602082019050919050565b5f6020820190508181035f830152612d1981612ce0565b9050919050565b7f73616c6520636f756e74206572726f72000000000000000000000000000000005f82015250565b5f612d54601083612544565b9150612d5f82612d20565b602082019050919050565b5f6020820190508181035f830152612d8181612d48565b9050919050565b7f4e6f7420656e6f756768204e465420617661696c61626c6520666f722073616c5f8201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b5f612de2602183612544565b9150612ded82612d88565b604082019050919050565b5f6020820190508181035f830152612e0f81612dd6565b9050919050565b5f612e2082611d98565b9150612e2b83611d98565b9250828202612e3981611d98565b91508282048414831517612e5057612e4f6128fa565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f612e8e82611d98565b9150612e9983611d98565b925082612ea957612ea8612e57565b5b828204905092915050565b5f612ebe82611d98565b9150612ec983611d98565b9250828203905081811115612ee157612ee06128fa565b5b92915050565b7f496e73756666696369656e742066756e647300000000000000000000000000005f82015250565b5f612f1b601283612544565b9150612f2682612ee7565b602082019050919050565b5f6020820190508181035f830152612f4881612f0f565b9050919050565b7f7361666542617463685472616e7366657246726f6d206572726f7200000000005f82015250565b5f612f83601b83612544565b9150612f8e82612f4f565b602082019050919050565b5f6020820190508181035f830152612fb081612f77565b9050919050565b7f5f736166655472616e7366657246726f6d20746f206572726f720000000000005f82015250565b5f612feb601a83612544565b9150612ff682612fb7565b602082019050919050565b5f6020820190508181035f83015261301881612fdf565b9050919050565b7f5f736166655472616e7366657246726f6d2066726f6d206572726f72000000005f82015250565b5f613053601c83612544565b915061305e8261301f565b602082019050919050565b5f6020820190508181035f83015261308081613047565b9050919050565b7f5f7361666542617463685472616e7366657246726f6d20746f206572726f72005f82015250565b5f6130bb601f83612544565b91506130c682613087565b602082019050919050565b5f6020820190508181035f8301526130e8816130af565b9050919050565b7f5f7361666542617463685472616e7366657246726f6d2066726f6d206572726f5f8201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b5f613149602183612544565b9150613154826130ef565b604082019050919050565b5f6020820190508181035f8301526131768161313d565b9050919050565b7f757064617465206572726f7200000000000000000000000000000000000000005f82015250565b5f6131b1600c83612544565b91506131bc8261317d565b602082019050919050565b5f6020820190508181035f8301526131de816131a5565b9050919050565b7f7570646174652062616c616e6365206572726f720000000000000000000000005f82015250565b5f613219601483612544565b9150613224826131e5565b602082019050919050565b5f6020820190508181035f8301526132468161320d565b905091905056fea26469706673582212208a7c440bc2bd44dc1754ce182277407954b879b5a3950acd96396c1d350c1b9064736f6c63430008190033d09fd183d0b7d18bd180d0b8d0ba20d0bfd0bed185d0b8d182d0b8d0bb20d0bad0bed182d0b8d0bad0b020d18120d097d0b5d0bcd0bbd0b8d09ed0bdd0b820d0bfd183d182d0b5d188d0b5d181d182d0b2d183d18ed18220d0bfd0be20d0b2d181d0b5d0bbd0b5d0bdd0bdd0bed0b9d09ad0bed0bcd0bed187d0b5d0ba20d181d0bbd0b8d0bbd181d18f20d18120d0bad0bed181d0bcd0bed181d0bed0bcd092d0bad183d181d0bdd18fd188d0bad0b020d0b2d0bfd0b5d180d0b2d18bd0b520d0bfd180d0bed0b1d183d0b5d18220d18fd0bfd0bed0bdd181d0bad183d18e20d0bad183d185d0bdd18ed09ad0bed181d0bcd0b8d187d0b5d181d0bad0b8d0b520d0bad0bed182d0b8d0bad0b8d093d0b5d180d0b4d0b020d0b6d0b4d0b5d18220d0b1d0bed18f20d0bad183d180d0b0d0bdd182d0bed0b2d09ed0bd20d0b8d0b4d0b5d18220d0b8d0b3d180d0b0d182d18c20d0b220d0b1d0b0d181d0bad0b5d182d0b1d0bed0bbd0a1d0bad183d187d0b0d18ed189d0b0d18f20d185d0b0d181d0bad0b820d0bfd0be20d0b8d0bcd0b5d0bdd0b820d093d0b5d180d0b4d0b0d09fd180d0b8d0b5d185d0b0d0bbd0b020d0bed182d0b4d0bed185d0bdd183d182d18c20d0bfd0bed181d0bbd0b520d182d18fd0b6d0b5d0bbd0bed0b3d0be20d0bfd180d0bed0b5d0bad182d0b0d093d0b5d180d0b4d0b020d180d0b5d0bbd0b8d0b7d0bdd183d0bbd0b020d0bdd0bed0b2d18bd0b920d0bfd180d0bed0b5d0bad182",
}

// NftABI is the input ABI used to generate the binding from.
// Deprecated: Use NftMetaData.ABI instead.
var NftABI = NftMetaData.ABI

// NftBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NftMetaData.Bin instead.
var NftBin = NftMetaData.Bin

// DeployNft deploys a new Ethereum contract, binding an instance of Nft to it.
func DeployNft(auth *bind.TransactOpts, backend bind.ContractBackend, _owner common.Address) (common.Address, *types.Transaction, *Nft, error) {
	parsed, err := NftMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NftBin), backend, _owner)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Nft{NftCaller: NftCaller{contract: contract}, NftTransactor: NftTransactor{contract: contract}, NftFilterer: NftFilterer{contract: contract}}, nil
}

// Nft is an auto generated Go binding around an Ethereum contract.
type Nft struct {
	NftCaller     // Read-only binding to the contract
	NftTransactor // Write-only binding to the contract
	NftFilterer   // Log filterer for contract events
}

// NftCaller is an auto generated read-only Go binding around an Ethereum contract.
type NftCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NftTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NftTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NftFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NftFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NftSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NftSession struct {
	Contract     *Nft              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NftCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NftCallerSession struct {
	Contract *NftCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// NftTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NftTransactorSession struct {
	Contract     *NftTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NftRaw is an auto generated low-level Go binding around an Ethereum contract.
type NftRaw struct {
	Contract *Nft // Generic contract binding to access the raw methods on
}

// NftCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NftCallerRaw struct {
	Contract *NftCaller // Generic read-only contract binding to access the raw methods on
}

// NftTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NftTransactorRaw struct {
	Contract *NftTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNft creates a new instance of Nft, bound to a specific deployed contract.
func NewNft(address common.Address, backend bind.ContractBackend) (*Nft, error) {
	contract, err := bindNft(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Nft{NftCaller: NftCaller{contract: contract}, NftTransactor: NftTransactor{contract: contract}, NftFilterer: NftFilterer{contract: contract}}, nil
}

// NewNftCaller creates a new read-only instance of Nft, bound to a specific deployed contract.
func NewNftCaller(address common.Address, caller bind.ContractCaller) (*NftCaller, error) {
	contract, err := bindNft(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NftCaller{contract: contract}, nil
}

// NewNftTransactor creates a new write-only instance of Nft, bound to a specific deployed contract.
func NewNftTransactor(address common.Address, transactor bind.ContractTransactor) (*NftTransactor, error) {
	contract, err := bindNft(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NftTransactor{contract: contract}, nil
}

// NewNftFilterer creates a new log filterer instance of Nft, bound to a specific deployed contract.
func NewNftFilterer(address common.Address, filterer bind.ContractFilterer) (*NftFilterer, error) {
	contract, err := bindNft(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NftFilterer{contract: contract}, nil
}

// bindNft binds a generic wrapper to an already deployed contract.
func bindNft(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := NftMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Nft *NftRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Nft.Contract.NftCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Nft *NftRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Nft.Contract.NftTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Nft *NftRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Nft.Contract.NftTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Nft *NftCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Nft.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Nft *NftTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Nft.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Nft *NftTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Nft.Contract.contract.Transact(opts, method, params...)
}

// NFTs is a free data retrieval call binding the contract method 0xa3c0b95b.
//
// Solidity: function NFTs(uint256 ) view returns(uint256)
func (_Nft *NftCaller) NFTs(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Nft.contract.Call(opts, &out, "NFTs", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NFTs is a free data retrieval call binding the contract method 0xa3c0b95b.
//
// Solidity: function NFTs(uint256 ) view returns(uint256)
func (_Nft *NftSession) NFTs(arg0 *big.Int) (*big.Int, error) {
	return _Nft.Contract.NFTs(&_Nft.CallOpts, arg0)
}

// NFTs is a free data retrieval call binding the contract method 0xa3c0b95b.
//
// Solidity: function NFTs(uint256 ) view returns(uint256)
func (_Nft *NftCallerSession) NFTs(arg0 *big.Int) (*big.Int, error) {
	return _Nft.Contract.NFTs(&_Nft.CallOpts, arg0)
}

// PROFIcontract is a free data retrieval call binding the contract method 0x8a465322.
//
// Solidity: function PROFIcontract() view returns(address)
func (_Nft *NftCaller) PROFIcontract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Nft.contract.Call(opts, &out, "PROFIcontract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PROFIcontract is a free data retrieval call binding the contract method 0x8a465322.
//
// Solidity: function PROFIcontract() view returns(address)
func (_Nft *NftSession) PROFIcontract() (common.Address, error) {
	return _Nft.Contract.PROFIcontract(&_Nft.CallOpts)
}

// PROFIcontract is a free data retrieval call binding the contract method 0x8a465322.
//
// Solidity: function PROFIcontract() view returns(address)
func (_Nft *NftCallerSession) PROFIcontract() (common.Address, error) {
	return _Nft.Contract.PROFIcontract(&_Nft.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Nft *NftCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Nft.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Nft *NftSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Nft.Contract.BalanceOf(&_Nft.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Nft *NftCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Nft.Contract.BalanceOf(&_Nft.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Nft *NftCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _Nft.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Nft *NftSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Nft.Contract.BalanceOfBatch(&_Nft.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Nft *NftCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Nft.Contract.BalanceOfBatch(&_Nft.CallOpts, accounts, ids)
}

// Balances is a free data retrieval call binding the contract method 0x1f320331.
//
// Solidity: function balances(uint256 id, address account) view returns(uint256)
func (_Nft *NftCaller) Balances(opts *bind.CallOpts, id *big.Int, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Nft.contract.Call(opts, &out, "balances", id, account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Balances is a free data retrieval call binding the contract method 0x1f320331.
//
// Solidity: function balances(uint256 id, address account) view returns(uint256)
func (_Nft *NftSession) Balances(id *big.Int, account common.Address) (*big.Int, error) {
	return _Nft.Contract.Balances(&_Nft.CallOpts, id, account)
}

// Balances is a free data retrieval call binding the contract method 0x1f320331.
//
// Solidity: function balances(uint256 id, address account) view returns(uint256)
func (_Nft *NftCallerSession) Balances(id *big.Int, account common.Address) (*big.Int, error) {
	return _Nft.Contract.Balances(&_Nft.CallOpts, id, account)
}

// BeforeBuy is a free data retrieval call binding the contract method 0xa0a04d0f.
//
// Solidity: function beforeBuy(uint256 nftId, uint256 amount, address from, uint256 balance, uint256 discount) view returns(uint256)
func (_Nft *NftCaller) BeforeBuy(opts *bind.CallOpts, nftId *big.Int, amount *big.Int, from common.Address, balance *big.Int, discount *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Nft.contract.Call(opts, &out, "beforeBuy", nftId, amount, from, balance, discount)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BeforeBuy is a free data retrieval call binding the contract method 0xa0a04d0f.
//
// Solidity: function beforeBuy(uint256 nftId, uint256 amount, address from, uint256 balance, uint256 discount) view returns(uint256)
func (_Nft *NftSession) BeforeBuy(nftId *big.Int, amount *big.Int, from common.Address, balance *big.Int, discount *big.Int) (*big.Int, error) {
	return _Nft.Contract.BeforeBuy(&_Nft.CallOpts, nftId, amount, from, balance, discount)
}

// BeforeBuy is a free data retrieval call binding the contract method 0xa0a04d0f.
//
// Solidity: function beforeBuy(uint256 nftId, uint256 amount, address from, uint256 balance, uint256 discount) view returns(uint256)
func (_Nft *NftCallerSession) BeforeBuy(nftId *big.Int, amount *big.Int, from common.Address, balance *big.Int, discount *big.Int) (*big.Int, error) {
	return _Nft.Contract.BeforeBuy(&_Nft.CallOpts, nftId, amount, from, balance, discount)
}

// Collection is a free data retrieval call binding the contract method 0xf0772377.
//
// Solidity: function collection(uint256 id) view returns(uint256 id, string name, string description)
func (_Nft *NftCaller) Collection(opts *bind.CallOpts, id *big.Int) (struct {
	Id          *big.Int
	Name        string
	Description string
}, error) {
	var out []interface{}
	err := _Nft.contract.Call(opts, &out, "collection", id)

	outstruct := new(struct {
		Id          *big.Int
		Name        string
		Description string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Id = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Description = *abi.ConvertType(out[2], new(string)).(*string)

	return *outstruct, err

}

// Collection is a free data retrieval call binding the contract method 0xf0772377.
//
// Solidity: function collection(uint256 id) view returns(uint256 id, string name, string description)
func (_Nft *NftSession) Collection(id *big.Int) (struct {
	Id          *big.Int
	Name        string
	Description string
}, error) {
	return _Nft.Contract.Collection(&_Nft.CallOpts, id)
}

// Collection is a free data retrieval call binding the contract method 0xf0772377.
//
// Solidity: function collection(uint256 id) view returns(uint256 id, string name, string description)
func (_Nft *NftCallerSession) Collection(id *big.Int) (struct {
	Id          *big.Int
	Name        string
	Description string
}, error) {
	return _Nft.Contract.Collection(&_Nft.CallOpts, id)
}

// Collections is a free data retrieval call binding the contract method 0xfdbda0ec.
//
// Solidity: function collections(uint256 ) view returns(uint256)
func (_Nft *NftCaller) Collections(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Nft.contract.Call(opts, &out, "collections", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Collections is a free data retrieval call binding the contract method 0xfdbda0ec.
//
// Solidity: function collections(uint256 ) view returns(uint256)
func (_Nft *NftSession) Collections(arg0 *big.Int) (*big.Int, error) {
	return _Nft.Contract.Collections(&_Nft.CallOpts, arg0)
}

// Collections is a free data retrieval call binding the contract method 0xfdbda0ec.
//
// Solidity: function collections(uint256 ) view returns(uint256)
func (_Nft *NftCallerSession) Collections(arg0 *big.Int) (*big.Int, error) {
	return _Nft.Contract.Collections(&_Nft.CallOpts, arg0)
}

// Nft is a free data retrieval call binding the contract method 0x9d0214cb.
//
// Solidity: function nft(uint256 id) view returns(uint256 id, string name, string description, string image, uint256 count, uint256 timestamp, uint256 collection)
func (_Nft *NftCaller) Nft(opts *bind.CallOpts, id *big.Int) (struct {
	Id          *big.Int
	Name        string
	Description string
	Image       string
	Count       *big.Int
	Timestamp   *big.Int
	Collection  *big.Int
}, error) {
	var out []interface{}
	err := _Nft.contract.Call(opts, &out, "nft", id)

	outstruct := new(struct {
		Id          *big.Int
		Name        string
		Description string
		Image       string
		Count       *big.Int
		Timestamp   *big.Int
		Collection  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Id = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Description = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.Image = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.Count = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.Timestamp = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.Collection = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Nft is a free data retrieval call binding the contract method 0x9d0214cb.
//
// Solidity: function nft(uint256 id) view returns(uint256 id, string name, string description, string image, uint256 count, uint256 timestamp, uint256 collection)
func (_Nft *NftSession) Nft(id *big.Int) (struct {
	Id          *big.Int
	Name        string
	Description string
	Image       string
	Count       *big.Int
	Timestamp   *big.Int
	Collection  *big.Int
}, error) {
	return _Nft.Contract.Nft(&_Nft.CallOpts, id)
}

// Nft is a free data retrieval call binding the contract method 0x9d0214cb.
//
// Solidity: function nft(uint256 id) view returns(uint256 id, string name, string description, string image, uint256 count, uint256 timestamp, uint256 collection)
func (_Nft *NftCallerSession) Nft(id *big.Int) (struct {
	Id          *big.Int
	Name        string
	Description string
	Image       string
	Count       *big.Int
	Timestamp   *big.Int
	Collection  *big.Int
}, error) {
	return _Nft.Contract.Nft(&_Nft.CallOpts, id)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Nft *NftCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Nft.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Nft *NftSession) Owner() (common.Address, error) {
	return _Nft.Contract.Owner(&_Nft.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Nft *NftCallerSession) Owner() (common.Address, error) {
	return _Nft.Contract.Owner(&_Nft.CallOpts)
}

// AfterBuy is a paid mutator transaction binding the contract method 0xb52d4681.
//
// Solidity: function afterBuy(uint256 nftId, uint256 amount, address from) returns()
func (_Nft *NftTransactor) AfterBuy(opts *bind.TransactOpts, nftId *big.Int, amount *big.Int, from common.Address) (*types.Transaction, error) {
	return _Nft.contract.Transact(opts, "afterBuy", nftId, amount, from)
}

// AfterBuy is a paid mutator transaction binding the contract method 0xb52d4681.
//
// Solidity: function afterBuy(uint256 nftId, uint256 amount, address from) returns()
func (_Nft *NftSession) AfterBuy(nftId *big.Int, amount *big.Int, from common.Address) (*types.Transaction, error) {
	return _Nft.Contract.AfterBuy(&_Nft.TransactOpts, nftId, amount, from)
}

// AfterBuy is a paid mutator transaction binding the contract method 0xb52d4681.
//
// Solidity: function afterBuy(uint256 nftId, uint256 amount, address from) returns()
func (_Nft *NftTransactorSession) AfterBuy(nftId *big.Int, amount *big.Int, from common.Address) (*types.Transaction, error) {
	return _Nft.Contract.AfterBuy(&_Nft.TransactOpts, nftId, amount, from)
}

// CreateCollection is a paid mutator transaction binding the contract method 0x176b9b75.
//
// Solidity: function createCollection(string name, string description) returns(uint256)
func (_Nft *NftTransactor) CreateCollection(opts *bind.TransactOpts, name string, description string) (*types.Transaction, error) {
	return _Nft.contract.Transact(opts, "createCollection", name, description)
}

// CreateCollection is a paid mutator transaction binding the contract method 0x176b9b75.
//
// Solidity: function createCollection(string name, string description) returns(uint256)
func (_Nft *NftSession) CreateCollection(name string, description string) (*types.Transaction, error) {
	return _Nft.Contract.CreateCollection(&_Nft.TransactOpts, name, description)
}

// CreateCollection is a paid mutator transaction binding the contract method 0x176b9b75.
//
// Solidity: function createCollection(string name, string description) returns(uint256)
func (_Nft *NftTransactorSession) CreateCollection(name string, description string) (*types.Transaction, error) {
	return _Nft.Contract.CreateCollection(&_Nft.TransactOpts, name, description)
}

// CreateNFT is a paid mutator transaction binding the contract method 0x2d7561cf.
//
// Solidity: function createNFT(string name, string description, string image, uint256 price, uint256 count, uint256 collectionId) returns(uint256)
func (_Nft *NftTransactor) CreateNFT(opts *bind.TransactOpts, name string, description string, image string, price *big.Int, count *big.Int, collectionId *big.Int) (*types.Transaction, error) {
	return _Nft.contract.Transact(opts, "createNFT", name, description, image, price, count, collectionId)
}

// CreateNFT is a paid mutator transaction binding the contract method 0x2d7561cf.
//
// Solidity: function createNFT(string name, string description, string image, uint256 price, uint256 count, uint256 collectionId) returns(uint256)
func (_Nft *NftSession) CreateNFT(name string, description string, image string, price *big.Int, count *big.Int, collectionId *big.Int) (*types.Transaction, error) {
	return _Nft.Contract.CreateNFT(&_Nft.TransactOpts, name, description, image, price, count, collectionId)
}

// CreateNFT is a paid mutator transaction binding the contract method 0x2d7561cf.
//
// Solidity: function createNFT(string name, string description, string image, uint256 price, uint256 count, uint256 collectionId) returns(uint256)
func (_Nft *NftTransactorSession) CreateNFT(name string, description string, image string, price *big.Int, count *big.Int, collectionId *big.Int) (*types.Transaction, error) {
	return _Nft.Contract.CreateNFT(&_Nft.TransactOpts, name, description, image, price, count, collectionId)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address to, uint256 id, uint256 value) returns()
func (_Nft *NftTransactor) Mint(opts *bind.TransactOpts, to common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Nft.contract.Transact(opts, "mint", to, id, value)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address to, uint256 id, uint256 value) returns()
func (_Nft *NftSession) Mint(to common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Nft.Contract.Mint(&_Nft.TransactOpts, to, id, value)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address to, uint256 id, uint256 value) returns()
func (_Nft *NftTransactorSession) Mint(to common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Nft.Contract.Mint(&_Nft.TransactOpts, to, id, value)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0xfba0ee64.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] values) returns()
func (_Nft *NftTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _Nft.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, values)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0xfba0ee64.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] values) returns()
func (_Nft *NftSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _Nft.Contract.SafeBatchTransferFrom(&_Nft.TransactOpts, from, to, ids, values)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0xfba0ee64.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] values) returns()
func (_Nft *NftTransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _Nft.Contract.SafeBatchTransferFrom(&_Nft.TransactOpts, from, to, ids, values)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x0febdd49.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 value) returns()
func (_Nft *NftTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Nft.contract.Transact(opts, "safeTransferFrom", from, to, id, value)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x0febdd49.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 value) returns()
func (_Nft *NftSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Nft.Contract.SafeTransferFrom(&_Nft.TransactOpts, from, to, id, value)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x0febdd49.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 value) returns()
func (_Nft *NftTransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Nft.Contract.SafeTransferFrom(&_Nft.TransactOpts, from, to, id, value)
}

// SaleNFT is a paid mutator transaction binding the contract method 0x734eda69.
//
// Solidity: function saleNFT(address from, uint256 nftId, uint256 price, uint256 count) returns()
func (_Nft *NftTransactor) SaleNFT(opts *bind.TransactOpts, from common.Address, nftId *big.Int, price *big.Int, count *big.Int) (*types.Transaction, error) {
	return _Nft.contract.Transact(opts, "saleNFT", from, nftId, price, count)
}

// SaleNFT is a paid mutator transaction binding the contract method 0x734eda69.
//
// Solidity: function saleNFT(address from, uint256 nftId, uint256 price, uint256 count) returns()
func (_Nft *NftSession) SaleNFT(from common.Address, nftId *big.Int, price *big.Int, count *big.Int) (*types.Transaction, error) {
	return _Nft.Contract.SaleNFT(&_Nft.TransactOpts, from, nftId, price, count)
}

// SaleNFT is a paid mutator transaction binding the contract method 0x734eda69.
//
// Solidity: function saleNFT(address from, uint256 nftId, uint256 price, uint256 count) returns()
func (_Nft *NftTransactorSession) SaleNFT(from common.Address, nftId *big.Int, price *big.Int, count *big.Int) (*types.Transaction, error) {
	return _Nft.Contract.SaleNFT(&_Nft.TransactOpts, from, nftId, price, count)
}

// TrasnferCollection is a paid mutator transaction binding the contract method 0xaaadbbae.
//
// Solidity: function trasnferCollection(uint256 collectionId, address highestBidder) returns()
func (_Nft *NftTransactor) TrasnferCollection(opts *bind.TransactOpts, collectionId *big.Int, highestBidder common.Address) (*types.Transaction, error) {
	return _Nft.contract.Transact(opts, "trasnferCollection", collectionId, highestBidder)
}

// TrasnferCollection is a paid mutator transaction binding the contract method 0xaaadbbae.
//
// Solidity: function trasnferCollection(uint256 collectionId, address highestBidder) returns()
func (_Nft *NftSession) TrasnferCollection(collectionId *big.Int, highestBidder common.Address) (*types.Transaction, error) {
	return _Nft.Contract.TrasnferCollection(&_Nft.TransactOpts, collectionId, highestBidder)
}

// TrasnferCollection is a paid mutator transaction binding the contract method 0xaaadbbae.
//
// Solidity: function trasnferCollection(uint256 collectionId, address highestBidder) returns()
func (_Nft *NftTransactorSession) TrasnferCollection(collectionId *big.Int, highestBidder common.Address) (*types.Transaction, error) {
	return _Nft.Contract.TrasnferCollection(&_Nft.TransactOpts, collectionId, highestBidder)
}
